generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  prismaJsonNullability = "true"
  useDecimalJs          = "true"
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  relationModel         = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  applicationId      String             @id
  candidateId        String
  potentialStartDate DateTime
  applicationType    String
  finalDecision      String?
  university         String?
  candidate          Candidate          @relation(fields: [candidateId], references: [candidateId])
  interestedOffices  InterestedOffice[]
  interviews         Interview[]
}

model Candidate {
  candidateId   String        @id
  applicationId String?
  userId        String?       @unique
  resumeUrl     String?
  phone         String?
  linkedIn      String?
  applications  Application[]
  user          User?         @relation(fields: [userId], references: [id])
  interactions  Interaction[]
}

model Interaction {
  interactionId  String     @id
  eventId        String?
  candidateId    String?
  notes          String?
  sentimentScore Float?
  candidate      Candidate? @relation(fields: [candidateId], references: [candidateId])
  event          Event?     @relation(fields: [eventId], references: [eventId])
}

model Event {
  eventId      String        @id
  hrLeadId     String?
  hrLead       Employee?     @relation(fields: [hrLeadId], references: [employeeId])
  date         DateTime?
  location     String?
  description  String?
  title        String?
  interactions Interaction[]
}

model Interview {
  interviewId       String      @id
  interviewerId     String?
  applicationId     String
  notes             String?
  interviewDateTime DateTime
  sentimentScore    Float?
  interviewRound    String?
  application       Application @relation(fields: [applicationId], references: [applicationId])
}

model InterestedOffice {
  interestedOfficeId String      @id
  officeId           String
  applicationId      String
  application        Application @relation(fields: [applicationId], references: [applicationId])
  office             Office      @relation(fields: [officeId], references: [officeId])
}

model Office {
  officeId          String             @id
  city              String?
  state             String?
  employees         Employee[]
  interestedOffices InterestedOffice[]
}

model User {
  id             String     @id
  email          String     @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  candidate      Candidate?
  employee       Employee?
  sessions       Session[]
}

model Session {
  id          String   @id
  userId      String
  expiresAt   DateTime
  candidateId String?
  employeeId  String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  employeeId   String  @id
  homeOfficeId String?
  userId       String? @unique
  position     String?
  homeOffice   Office? @relation(fields: [homeOfficeId], references: [officeId])
  user         User?   @relation(fields: [userId], references: [id])
  Event        Event[]
}
